==== PODS =====
- Always get an ip address assigned to a PODS
- Node IP is not the same as POD Ip address.

- When kubernetes is initally configured, an internal private network is configured
Example:

  Internal kubernetes address: 10.244.0.0.
  then: pods might have an internal IP address of 10.244.0.2
IP addresses are subject to change when pods are recreated

If two nodes are running kubernetes, with 192.168.1.2 and 192.168.1.3 assigned
and each one has a pod inide with an internal address of 10.244.0.2. This only works
if they are individually deployed nodes.

This will not work if the pods are of the same cluster.


kubernetes does not automatically set up networking, it is expected we do it to meet
requirements.

* All containers/pods can communicate with each other without NAT
* All nodes can communicate with all containers and vice versa without communicate

FLannel/Weavenet is one of those solutions to help out with that.

To solve the issue with multiple pods in same cluster, the solutions
will assign internal address of 10.244.0.0 to first pod, then 10.244.1.0
to second pod.

Then internal addresses are assigned differently, first pod in 1st node assigned
10.244.0.2 and first pod in 2nd node is 10.244.1.2.

Every instance have a different ip address.

If you run the following command, it will output IP Addresses.
```
kubectl get pods -o wide
```

Pods get assigned random IP addresses every tiem so it is dynamic addresses.

===================
kubernetes Services- External networking
===================

***** Nodeport
If you've got an app inside the pod, and its got its own internal IP Address.
from your local workstation, you cannot access the POD directly.
You can if you ssh directly to the kubernetes node and then curl the IP addresses
cos you are part of the same network.


But how to access the app from inside the pod outside?

Need to map the request from laptop that you make to kubernetes node to the pod with the actual IP address inside,
which is where kubernetes services called nodePort comes in.
Maps a port on the node to the pod port.
TargetPort= Pod port
Port- the outgoing port on Service- Service is like its own server inside the pod, its got its own IP address.
nodePort= valid ranges are from 30000 to 32767.

Need to have labels that matches and itll filter out the ones matching the labels.
Service uses random algorithm to balance out the nodes traffic.

If you dont't define any of the ports, it will be configured automatically. Different IP addresses, same Ports are available on the cluster.


There is also ClusterIP (Creates virtual IP address inside cluster to enable frontend to talk to backends )
and Load balancer which distributes traffic.
